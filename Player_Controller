using UnityEngine;
using System.Collections;

public class playerController : MonoBehaviour 
{
	[HideInInspector]
	public bool facingRight = true;			// For determining which way the player is currently facing.
	[HideInInspector]
	public bool jump = false;				//Condition for whether the player should jump.

	public float moveForce = 365f;			//Amound of force added to player when moves left or right.
	public float maxSpeed = 5f;				//Fastest player can travel on the x-axis.
	public float jumpForce = 1000f;			//Amount of force added when player jumps.


	private Transform groundCheck;			//A position marking where to check if the player is grounded.
	private bool grounded = false;			// Whether or not the player is grounded.


	void Awake()
	{
		//Setting up references.
		//groundCheck = transform.Find("groundCheck");
		//Debug.Log (groundCheck);
	}


	void Update()
	{
		//The player is grounded if a linecast to the groundcheck position hits anything on the ground layer.
		grounded = Physics2D.Linecast(transform.position, new Vector2(transform.position.x, transform.position.y - 0.5f), 1 << LayerMask.NameToLayer ("Ground"));
		Debug.Log (grounded);
		//If the jump button is pressed and the player is grounded then  player should jump.
		if(Input.GetButtonDown("Jump") && grounded)
			jump = true;
	}


	void FixedUpdate()
	{
		//Cache horizontal input.
		float h = Input.GetAxis("Horizontal");

		//If player is changing direction (h has a diffrent sign to velocity.x) or hasn't reached max speed yet...
		if (h * rigidbody2D.velocity.x < maxSpeed)
			// Add a force to the player.
			rigidbody2D.AddForce(Vector2.right * h * moveForce);

		//If the player's horizontal velocity is greater than the maxSpeed...
		if(Mathf.Abs (rigidbody2D.velocity.x) > maxSpeed)
			//...set the player's velocity to the maxSpeed in the x axis.
			rigidbody2D.velocity = new Vector2 (Mathf.Sign(rigidbody2D.velocity.x) * maxSpeed, rigidbody2D.velocity.y);
		//If the input is moving the player right and the player is facing left...
		if (h > 0 && !facingRight)
			// flip the player.
			Flip();
		//Otherwise if the input is moving the player left and the player is facing right...
		else if (h < 0 && !facingRight)
			// flip the player.
			Flip();

		//If player should jump...
		if (jump)
		{
			//Add a vertical force to the player.
			rigidbody2D.AddForce(new Vector2 (0f, jumpForce));

			//Make sure player can't jump again until jump conditions from the Update is satisfied.
			jump = false;
		}
	}


	void Flip()
	{
		// Switch the way the player is labelled as facing.
		facingRight = !facingRight;

		//Multiply the player's local scale by -1.
		Vector3 theScale = transform.localScale;
		theScale.x *=-1;
		transform.localScale = theScale;
	}
}
